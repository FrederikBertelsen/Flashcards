// <auto-generated />
using System;
using Backend.Models.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Backend.Models.Deck", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("Backend.Models.DeckCollaborator", b =>
                {
                    b.Property<string>("DeckId")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.HasKey("DeckId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DeckCollaborators");
                });

            modelBuilder.Entity("Backend.Models.Flashcard", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<string>("Back")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeckId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<int>("FlashType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Front")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.ToTable("Flashcards");
                });

            modelBuilder.Entity("Backend.Models.LearningSession", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeckId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("UserId");

                    b.ToTable("LearningSessions");
                });

            modelBuilder.Entity("Backend.Models.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<int>("ClozeIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FlashcardId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<string>("LearningSessionId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FlashcardId");

                    b.HasIndex("LearningSessionId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Backend.Models.ReviewLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<string>("LearningSessionId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LearningSessionId");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewLogs");
                });

            modelBuilder.Entity("Backend.Models.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Fresh")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("TEXT");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Models.Deck", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("Decks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.DeckCollaborator", b =>
                {
                    b.HasOne("Backend.Models.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Flashcard", b =>
                {
                    b.HasOne("Backend.Models.Deck", "Deck")
                        .WithMany("Flashcards")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("Backend.Models.LearningSession", b =>
                {
                    b.HasOne("Backend.Models.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("LearningSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Review", b =>
                {
                    b.HasOne("Backend.Models.Flashcard", "Flashcard")
                        .WithMany()
                        .HasForeignKey("FlashcardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.LearningSession", "LearningSession")
                        .WithMany("Reviews")
                        .HasForeignKey("LearningSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Backend.Models.DTOs.Card", "Card", b1 =>
                        {
                            b1.Property<string>("ReviewId")
                                .HasColumnType("TEXT");

                            b1.Property<float>("Difficulty")
                                .HasColumnType("REAL");

                            b1.Property<DateTime>("Due")
                                .HasColumnType("TEXT");

                            b1.Property<int>("ElapsedDays")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Lapses")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime?>("LastReview")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Reps")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ScheduledDays")
                                .HasColumnType("INTEGER");

                            b1.Property<float>("Stability")
                                .HasColumnType("REAL");

                            b1.Property<int>("State")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ReviewId");

                            b1.ToTable("Reviews");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("Card")
                        .IsRequired();

                    b.Navigation("Flashcard");

                    b.Navigation("LearningSession");
                });

            modelBuilder.Entity("Backend.Models.ReviewLog", b =>
                {
                    b.HasOne("Backend.Models.LearningSession", "LearningSession")
                        .WithMany()
                        .HasForeignKey("LearningSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.LearningSession", null)
                        .WithMany("ReviewLogs")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Backend.Models.Log", "Log", b1 =>
                        {
                            b1.Property<string>("ReviewLogId")
                                .HasColumnType("TEXT");

                            b1.Property<float>("Difficulty")
                                .HasColumnType("REAL");

                            b1.Property<DateTime>("Due")
                                .HasColumnType("TEXT");

                            b1.Property<int>("ElapsedDays")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("LastElapsedDays")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Rating")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("Review")
                                .HasColumnType("TEXT");

                            b1.Property<int>("ScheduledDays")
                                .HasColumnType("INTEGER");

                            b1.Property<float>("Stability")
                                .HasColumnType("REAL");

                            b1.Property<int>("State")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ReviewLogId");

                            b1.ToTable("ReviewLogs");

                            b1.WithOwner()
                                .HasForeignKey("ReviewLogId");
                        });

                    b.Navigation("LearningSession");

                    b.Navigation("Log")
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Backend.Models.Session", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.Deck", b =>
                {
                    b.Navigation("Flashcards");
                });

            modelBuilder.Entity("Backend.Models.LearningSession", b =>
                {
                    b.Navigation("ReviewLogs");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("Decks");

                    b.Navigation("LearningSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
